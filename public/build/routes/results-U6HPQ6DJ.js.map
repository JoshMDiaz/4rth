{
  "version": 3,
  "sources": ["../../../app/routes/results.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/results.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/results.tsx\");\n  import.meta.hot.lastModified = \"1692855253458.2986\";\n}\n// REMIX HMR END\n\nimport React, { useEffect, useState } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography } from '@mui/material';\nconst ResultsPage = () => {\n  _s();\n  const [playerData, setPlayerData] = useState([]);\n  useEffect(() => {\n    const savedPlayers = localStorage.getItem('players');\n    if (savedPlayers) {\n      setPlayerData(JSON.parse(savedPlayers));\n    }\n  }, []);\n  const mostSkinzPlayer = playerData.reduce((maxSkinzPlayer, player) => {\n    if (player.skinz > maxSkinzPlayer.skinz) {\n      return player;\n    }\n    return maxSkinzPlayer;\n  }, playerData[0]);\n\n  // Custom sort function to sort by wins and then by points\n  const customSort = (a, b) => {\n    if (a.wins === b.wins) {\n      return b.points - a.points; // Sort by points if wins are equal\n    }\n\n    return b.wins - a.wins; // Sort by wins by default\n  };\n\n  // Sort the playerData using the custom sort function\n  const sortedPlayerData = [...playerData].sort(customSort);\n\n  // Find all players with the most skinz\n  const mostSkinzPlayers = playerData.filter(player => player.skinz === mostSkinzPlayer.skinz);\n  return <>\n      <Typography variant=\"h4\" gutterBottom>\n        Winners\n      </Typography>\n      <div>\n        <Typography>1st Place:</Typography>\n        {sortedPlayerData.length > 0 && <Typography>{sortedPlayerData[0].name}</Typography>}\n      </div>\n      <div>\n        <Typography>2nd Place:</Typography>\n        {sortedPlayerData.length > 1 && <Typography>{sortedPlayerData[1].name}</Typography>}\n      </div>\n      <div>\n        <Typography>3rd Place:</Typography>\n        {sortedPlayerData.length > 2 && <Typography>{sortedPlayerData[2].name}</Typography>}\n      </div>\n      <div>\n        <Typography>Most Skinz:</Typography>\n        {mostSkinzPlayers.length > 0 && <Typography>\n            {mostSkinzPlayers.map(player => player.name).join(', ')}\n          </Typography>}\n      </div>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Player Name</TableCell>\n              <TableCell>Total Wins</TableCell>\n              <TableCell>Total Points</TableCell>\n              <TableCell>Total Skinz</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {sortedPlayerData.map(player => <TableRow key={player.id}>\n                <TableCell>{player.name}</TableCell>\n                <TableCell>{player.wins}</TableCell>\n                <TableCell>{player.points}</TableCell>\n                <TableCell>{player.skinz}</TableCell>\n              </TableRow>)}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>;\n};\n_s(ResultsPage, \"yKJJ5ZQP+Dg5o2LP7bIX127p9No=\");\n_c = ResultsPage;\nexport default ResultsPage;\nvar _c;\n$RefreshReg$(_c, \"ResultsPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
