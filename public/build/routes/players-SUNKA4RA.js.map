{
  "version": 3,
  "sources": ["../../../app/routes/players.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/players.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/players.tsx\");\n  import.meta.hot.lastModified = \"1693093840866.8015\";\n}\n// REMIX HMR END\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport { useNavigate } from '@remix-run/react';\nconst PlayerForm = () => {\n  _s();\n  const [players, setPlayers] = useState([]),\n    [newPlayerName, setNewPlayerName] = useState(''),\n    [editingPlayer, setEditingPlayer] = useState(null),\n    navigate = useNavigate();\n\n  // Load players from localStorage on component mount\n  useEffect(() => {\n    const savedPlayers = localStorage.getItem('players');\n    if (savedPlayers) {\n      setPlayers(JSON.parse(savedPlayers));\n    }\n  }, []);\n\n  // Save players to localStorage whenever players change\n  useEffect(() => {\n    localStorage.setItem('players', JSON.stringify(players));\n  }, [players]);\n  const handlePlayerNameChange = event => {\n    setNewPlayerName(event.target.value);\n  };\n  const addPlayer = () => {\n    if (players.length < 8 && newPlayerName.trim() !== '') {\n      const isNameTaken = players.some(player => player.name === newPlayerName);\n      if (!isNameTaken) {\n        const newPlayer = {\n          id: Date.now(),\n          // Assign a unique ID\n          name: newPlayerName,\n          wins: 0,\n          skinz: 0,\n          points: 0\n        };\n        setPlayers([...players, newPlayer]);\n        setNewPlayerName('');\n        if (players.length + 1 === 8) {\n          setNewPlayerName('');\n        }\n      } else {\n        alert('Player name already exists.');\n      }\n    }\n  };\n  const editPlayerName = player => {\n    setEditingPlayer(player);\n  };\n  const saveEditedName = (player, newName) => {\n    const updatedPlayers = players.map(p => p.id === player.id ? {\n      ...p,\n      name: newName\n    } : p);\n    setPlayers(updatedPlayers);\n    setEditingPlayer(null);\n  };\n  const incrementSkinz = id => {\n    const updatedPlayers = players.map(player => player.id === id ? {\n      ...player,\n      skinz: player.skinz + 1\n    } : player);\n    setPlayers(updatedPlayers);\n  };\n  const handleClearTable = () => {\n    setPlayers([]);\n    setNewPlayerName('');\n    setEditingPlayer(null);\n  };\n  const handleDeleteRow = id => {\n    const updatedPlayers = players.filter(player => player.id !== id);\n    setPlayers(updatedPlayers);\n    setEditingPlayer(null);\n  };\n  const isTextFieldDisabled = players.length >= 8 || !!editingPlayer;\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      addPlayer();\n    }\n  };\n  const generateMatchups = () => {\n    if (players.length === 8) {\n      const matchups = [];\n      const rounds = 7; // Number of rounds\n\n      // Generate the round-robin matchups\n      for (let round = 0; round < rounds; round++) {\n        const roundMatchups = [];\n        const shuffledPlayers = shuffleArray(players);\n        for (let i = 0; i < shuffledPlayers.length; i += 4) {\n          const matchup = {\n            team1: [shuffledPlayers[i], shuffledPlayers[i + 1]],\n            team2: [shuffledPlayers[i + 2], shuffledPlayers[i + 3]]\n          };\n          roundMatchups.push(matchup);\n        }\n        matchups.push(roundMatchups);\n      }\n      localStorage.setItem('matchups', JSON.stringify(matchups));\n\n      // Navigate to the matchups page\n      // You can use React Router or any other navigation method\n      navigate('/matchups');\n    } else {\n      alert('You need exactly 8 players to generate matchups.');\n    }\n  };\n  const shuffleArray = array => {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  };\n  return <div>\n      <TextField label=\"Player Name\" value={newPlayerName} onChange={handlePlayerNameChange} onKeyDown={handleKeyDown} disabled={isTextFieldDisabled} />\n      <Button variant=\"contained\" color=\"primary\" onClick={addPlayer}>\n        Add Player\n      </Button>\n      <Button variant=\"contained\" color=\"secondary\" onClick={handleClearTable}>\n        Clear Table\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" onClick={generateMatchups} disabled={players.length !== 8}>\n        Generate Matchups\n      </Button>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Wins</TableCell>\n              <TableCell>Skinz</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {players.map(player => <TableRow key={player.id}>\n                <TableCell>\n                  {editingPlayer?.id === player.id ? <TextField value={editingPlayer.name} onChange={e => setEditingPlayer({\n                ...editingPlayer,\n                name: e.target.value\n              })} /> : player.name}\n                </TableCell>\n                <TableCell>{player.wins}</TableCell>\n                <TableCell>\n                  {player.skinz}\n                  <Button variant=\"contained\" color=\"primary\" onClick={() => incrementSkinz(player.id)}>\n                    +\n                  </Button>\n                </TableCell>\n                <TableCell>\n                  {editingPlayer?.id === player.id ? <Button variant=\"contained\" color=\"primary\" onClick={() => saveEditedName(editingPlayer, editingPlayer.name)}>\n                      Save\n                    </Button> : <>\n                      <Button variant=\"contained\" color=\"primary\" onClick={() => editPlayerName(player)}>\n                        Edit\n                      </Button>\n                      <Button variant=\"contained\" color=\"secondary\" onClick={() => handleDeleteRow(player.id)}>\n                        Delete\n                      </Button>\n                    </>}\n                </TableCell>\n              </TableRow>)}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>;\n};\n_s(PlayerForm, \"4v1+DWxk+ABw2TtcLvc6pZkCU0Q=\", false, function () {\n  return [useNavigate];\n});\n_c = PlayerForm;\nexport default PlayerForm;\nvar _c;\n$RefreshReg$(_c, \"PlayerForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
